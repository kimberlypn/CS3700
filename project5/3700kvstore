#!/usr/bin/env python
import argparse
import socket
import select
import time
import json
import random

# ----------------------------- GLOBAL VARIABLES -----------------------------

MAX_BYTES = 32768

# ------------------------- END OF GLOBALS VARIABLES -------------------------

class Datastore:
    def __init__(self, id, replicas):
        self.id = id # own ID
        self.replicas = replicas # IDs of all other replicas
        self.sock = self.__create_socket() # socket over which all messages will occur

    def __create_socket(self):
        """Creates and returns a connected socket"""
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        sock.connect(self.id)
        return sock

    def recv_msg(self):
        """Returns the data from the socket as a deserialized JSON object"""
        msg_raw = self.sock.recv(MAX_BYTES)
        msg = json.loads(msg_raw) if len(msg_raw) != 0 else {}
        return msg

    def send_msg(self, msg):
        """Sends a JSON object through the socket"""
        print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
        msg = json.dumps(msg)
        self.sock.send(msg)


def run(datastore):
    last = 0
    """Runs the main loop"""
    while True:
        ready = select.select([datastore.sock], [], [], 0.1)[0]
        
        if datastore.sock in ready:
            msg = datastore.recv_msg()
                
            if not msg:
                continue
                
            # For now, ignore get() and put() from clients
            if msg['type'] in ['get', 'put']:
                pass
      
            # Handle noop messages. This may be removed from your final implementation
            elif msg['type'] == 'noop':
                print '%s received a NOOP from %s' % (msg['dst'], msg['src'])
       	
        clock = time.time()
	if clock - last > 2:
            # Send a no-op message to a random peer every two seconds, just for fun
            # You definitely want to remove this from your implementation
            msg = {'src': datastore.id, 'dst': random.choice(datastore.replicas), 'leader': 'FFFF', 'type': 'noop'}
            datastore.send_msg(msg)
            last = clock
 

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Key-Value Store.', 
                                     add_help=False)
    parser.add_argument('id',
                        help='ID of your replica (four-digit hex)')
    parser.add_argument('replicas',
                        nargs='+',
                        help='IDs of all other replicas (four-digit hexs)')
    args = parser.parse_args()

    # Initialize the datastore with the arguments passed
    datastore = Datastore(args.id, args.replicas)

    # Start the program
    run(datastore)
