#!/usr/bin/python3 -u
import argparse
import socket
import select
import time
import json
import random
import threading
import math
from enum import Enum

# ----------------------------- GLOBAL VARIABLES -----------------------------

MAX_BYTES = 32768 # maximum bytes to read in from the socket
HEARTBEAT_FREQ = 0.5 # seconds, or 500 milliseconds

# ------------------------- END OF GLOBALS VARIABLES -------------------------

def current_time():
    """Returns the current time in seconds"""
    return time.time()


class State(Enum):
    """Represents the possible server states at any given time"""
    LEADER = 1
    FOLLOWER = 2
    CANDIDATE = 3


class Sock:
    def __init__(self, lan):
        self.sock = self.__create_socket(lan) # socket over which all messages will occur

    def __create_socket(self, lan):
        """Creates and returns a connected socket"""
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        sock.connect(lan)
        return sock

    def recv(self):
        """Returns the data from the socket as a deserialized JSON object"""
        msg_raw = self.sock.recv(MAX_BYTES)
        msg = json.loads(bytes.decode(msg_raw)) if len(msg_raw) != 0 else {}
        return msg

    def send(self, msg):
        """Sends a JSON object through the socket"""
        print('{src} sending to {dst}'.format(src=msg['src'], dst=msg['dst']))
        msg = str.encode(json.dumps(msg))
        self.sock.send(msg)


class Server:
    def __init__(self, id, replicas):
        self.id = id # own ID
        self.replicas = replicas # IDs of all other replicas
        self.sock = Sock(id) # Sock object for sending/receiving messsages
        self.state = State.FOLLOWER # current state; initialized to follower
        self.leader = "FFFF" # ID of the assumed leader
        # election timeout chosen randomly from fixed interval of 0.15-0.3 s
        self.election_timeout = random.uniform(0.15, 0.3)
        self.prev_timeout = current_time() # timestamp of previous timeout
        self.votes = set() # votes received during the election process

        # ---------------------- PERSISTENT STATE (ALL) -----------------------
        self.current_term = 0 # latest term server has seen
        self.voted_for = None # ID of candidate that received vote in current term
        self.log = [] # log entries

        # ----------------------- VOLATILE STATE (ALL) ------------------------
        self.commit_idx = 0 # index of highest log entry known to be committed
        self.last_applied = 0 # index of highest log entry applied to state machine

        # --------------------- VOLATILE STATE (LEADER) -----------------------
        self.next_idx = {} # index of next log entry to send to each server
        self.match_idx = {} # index of highest log entry known on each server
        self.prev_heartbeat = current_time() # timestamp of previous heartbeat

        # Start heartbeat thread
        #threading.Thread(target=self.send_heartbeat).start()

    def send_heartbeat(self):
        """Sends periodic heartbeats as the leader"""
        time = current_time()
        while True:
            if self.state == State.LEADER:
                if (time - self.prev_heartbeat) >= HEARTBEAT_FREQ:
                    prev_log_idx = len(self.log) - 1
                    for replica in self.replicas:
                        msg = {
                            'src': self.id, 
                            'dst': replica,
                            # Used for followers to redirect clients
                            'leader': self.leader,
                            'type': 'append_entries',
                            # Leader's term
                            'term': self.current_term,
                            # Index of log entry immediately preceding new ones
                            'prev_log_idx': prev_log_idx,
                            # Term of prev_log_idx entry
                            'prev_log_term': self.log[prev_log_idx]['term'],
                            # Log entries to store (empty for heartbeat)
                            'entries': [],
                            # Leader's commit_idx
                            'leader_commit': self.commit_idx
                        }
                        self.sock.send(msg)
                    # Reset the heartbeat timer
                    self.prev_heartbeat = time

    def start_election(self):
        """Handles what happens when a node becomes a candidate"""
        # Switch to candidate state
        self.state = State.CANDIDATE
        # Increment the current term
        self.current_term += 1
        # Reset any votes from a previous election
        self.votes = set()
        # Vote for self
        self.voted_for = self.id
        self.votes.add(self.id)
        # Reset election timer
        self.election_timeout = random.uniform(0.15, 0.3)

    def check_timeout(self):
        """Determines if an election needs to take place"""
        time = current_time()

        if self.state != State.LEADER:
            if (time - self.prev_timeout) >= self.election_timeout:
                # Election timeout met, so start election
                start_election()
                # Send RequestVote RPCs to all other servers
                last_log_idx = len(self.log) - 1
                for replica in self.replicas:
                    msg = {
                        'src': self.id,
                        'dst': replica,
                        'type': 'request_vote',
                        # Candidate's term
                        'term': self.current_term,
                        # Index of candidate's last log entry
                        'last_log_idx': last_log_idx,
                        # Term of candidate's last log entry
                        'last_log_term': self.log[last_log_idx]['term']
                    }
                    self.sock.send(msg)
                # Reset the previous timeout
                self.prev_timeout = time

    def handle_heartbeat(self, msg):
        """Handles an AppendEntries RPC from a leader"""
        prev_log_idx = msg['prev_log_idx']
        prev_log_term = msg['prev_log_term']

        # Invalid if leader's term < receiver's term
        if msg['term'] < self.current_term:
            return False
        # Log doesn't contain entry at prev_log_idx whose term 
        # matches prev_log_term
        elif ((prev_log_idx > len(self.log) - 1) or 
            (self.log[prev_log_idx]['term'] != prev_log_term)):
            return False
        else:
            # If existing entry conflicts with new one (same idx but different 
            # terms), delete existing entry and all that follow it
            return True

    def handle_request_vote(self, msg):
        """Handles a RequestVote RPC from a candidate"""
        # Invalid if candidate's term < receiver's term
        if msg['term'] < self.current_term:
            return False
        # Grant vote if voted_for is null or equal to candidate's ID and
        # candidate's log is at least as up-to-date as receiver's log
        elif ((not self.voted_for or self.voted_for == msg['src']) and 
            msg['last_log_idx'] >= len(self.log) - 1):
            resp = {
                'src': self.id,
                'dst': msg['src'],
                'type': 'vote_granted'
            }
            self.sock.send(resp)
        else:
            return False

    def handle_received_vote(msg):
        """Handles a received vote during an election"""
        # Add the vote
        self.votes.add(msg['src'])
        # Check if the election was won
        quorum = math.floor(len(replicas)) + 1
        if len(self.votes) >= quorum:
            # Become the new leader
            self.state = State.LEADER

    def handle_get(self):
        """Handles a get request from the client"""


    def handle_put(self):
        """Handles a put request from the client"""


    def handle_data(self, msg):
        """Handles the data received from the socket accordingly"""
        time = current_time()

        if msg['type'] == 'append_entries':
            # Heartbeat
            if not msg['entries']:
                handle_heartbeat(msg)
            # RPC from leader to replicate log entries
            else:
                handle_append(msg)
        # RPC to vote in an election
        elif msg['type'] == 'request_vote':
            handle_request_vote(msg)
        # Vote received
        elif msg['type'] == 'vote_granted' and self.state == State.CANDIDATE:
            handle_received_vote(msg)
        # Get request from client
        elif msg['type'] == 'get' and self.state == State.LEADER:
            handle_get(msg)
        # Put request from client
        elif msg['type'] == 'put' and self.state == State.LEADER:
            handle_put(msg)

    def run(self):
        """Runs the main loop"""
        while True:
            # Check for an election timeout
            check_timeout()

            ready = select.select([self.sock.sock], [], [], 0.1)[0]
        
            if self.sock.sock in ready:
                msg = self.sock.recv()

                # Skip if there is no data
                if not msg:
                    continue

                # Reply with a fail message if the leader if unknown
                if self.leader == "FFFF":
                    resp = {
                        'src': self.id,
                        'dst': msg['src'],
                        'leader': self.leader,
                        'type': 'fail',
                        'MID': msg['MID']
                    }
                    self.sock.send(resp)
                # Else, handle the message
                else:
                    handle_data(msg)
              

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Distributed Key-Value Store.',
                                     add_help=False)
    parser.add_argument('id',
                        help='ID of your replica (four-digit hex)')
    parser.add_argument('replicas',
                        nargs='+',
                        help='IDs of all other replicas (four-digit hexs)')
    args = parser.parse_args()

    # Initialize the datastore with the arguments passed
    server = Server(args.id, args.replicas)

    # Start the program
    server.run()
