#!/usr/bin/python3 -u
import argparse
from urllib.parse import urlparse
import socket
import re

# ----------------------------- GLOBAL VARIABLES -----------------------------

# Root page for Fakebook
ROOT = 'http://fring.ccs.neu.edu/fakebook/'
# Log-in form for Fakebook
LOGIN_FORM = 'http://fring.ccs.neu.edu/accounts/login/?next=/fakebook/'
# Carriage return, line feed
CRLF = '\r\n'
# Maximum amount of data to be received at once from the socket
MAX_BYTES = 5000

# ------------------------- END OF GLOBALS VARIABLES -------------------------

def make_http(type, path, headers={}, body=''):
    msg = '{0} {1} HTTP/1.1'.format(type, path) + CRLF
    for key, value in headers.items():
        if value:
            msg += (': '.join((key, value)) + CRLF)
    msg += CRLF
    msg += body + CRLF
    return msg

def make_formstr(form):
    c = lambda s: s.strip().replace(' ', '+')
    return '&'.join(['='.join((c(key), c(value))) for key, value in form.items()])

def get_host_path(url):
    # Parse the URL and retrieve the necessary fields
    url = urlparse(url)
    host = url.netloc
    path = '/' if not url.path else url.path
    if url.query:
        path += '?' + url.query
    return (host, path)

class WebCrawler:
    def __init__(self, username, password):
        self.username = username # Username given by the user
        self.password = password # Password given by the user
        self.csrf = None # Initialize CSRF token to None
        self.session = None # Initialize session ID to None
        self.cookie = '' # Initialize cookie to an empty string

    def set_cookie(self):
        """Generates a cookie using the CSRF token and the session ID"""
        if self.csrf:
            self.cookie += 'csrftoken=' + self.csrf
        if self.session:
            if self.csrf:
                self.cookie += '; '
            self.cookie += 'sessionid=' + self.session

    def connect(self, host):
        """Creates and connects a socket"""
        # Set up the socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.3)
        # Connect to the server on the HTTP port
        sock.connect((host, 80))
        # Return the socket
        return sock

    def get_response(self, sock):
        """Returns the data retrieved from the socket"""
        data = ''
        while True:
            try:
                new_data = sock.recv(MAX_BYTES)
                # Exit the loop if all of the data has been retrieved
                if not new_data:
                    break
                # Else, append the retrieved data
                else:
                    data += new_data.rstrip().decode()
            except:
                break
        # Close the socket
        sock.close()
        return data

    def GET(self, url):
        """Implements the HTTP GET method"""
        # Parse the URL and retrieve the necessary fields
        host, path = get_host_path(url)

        # Send the request
        sock = self.connect(host)
        sock.send(str.encode(make_http('GET', path, {'cookie': self.cookie, 'host':host})))

        # Get the response
        resp = self.get_response(sock)

        return resp

    def POST(self, url, body):
        """Implements the HTTP POST method"""
        # Parse the URL and retrieve the necessary fields
        host, path = get_host_path(url)

        # Send the request
        sock = self.connect(host)
        headers = {
            'cookie': self.cookie,
            'host': host,
            'content-length': str(len(body)),
            'content-type': 'application/x-www-form-urlencoded'
        }
        sock.send(str.encode(make_http('POST', path, headers, body)))

        # Get the response
        resp = self.get_response(sock)

        return resp

    def login(self):
        """Logs into Fakebook"""
        login_form = self.GET(LOGIN_FORM)
        match = re.search('[Ss]et-[Cc]ookie:\W*csrftoken=(\w+);', login_form)
        if (not match):
            print('Couldn\'t extract CSRF token, aborting')
            print(login_form)
            exit(1)
        self.csrf = match.group(1)
        match = re.search('[Ss]et-[Cc]ookie:\W*sessionid=(\w+);', login_form)
        if (not match):
            print('Couldn\'t extract SessionID token, aborting')
            print(login_form)
            exit(1)
        self.session = match.group(1)

        self.set_cookie()

        login_resp = self.POST(LOGIN_FORM, make_formstr({
            'username': self.username,
            'password': self.password,
            'csrfmiddlewaretoken': self.csrf,
            'submit': 'Log in',
            'next': '/fakebook/'
        }))
        print(login_resp)


def crawl(crawler):
    """Runs the web crawler"""
    crawler.login()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Fakebook login.',
                                     add_help=False)
    parser.add_argument('username')
    parser.add_argument('password')
    args = parser.parse_args()

    # Create a WebCrawler with the given username and password
    crawler = WebCrawler(args.username, args.password)

    # Start crawling
    crawl(crawler)
