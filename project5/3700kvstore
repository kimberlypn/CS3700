#!/usr/bin/python3 -u
import argparse
import enum
import json
import logging
import math
import random
import select
import socket
import threading
import time

import myutils

# ----------------------------- GLOBAL VARIABLES -----------------------------

MAX_BYTES = 32768 # maximum bytes to read in from the socket
HEARTBEAT_FREQ = 0.5 # seconds, or 500 milliseconds

# ------------------------- END OF GLOBALS VARIABLES -------------------------

def current_time():
    """Returns the current time in seconds"""
    return time.time()


class State(enum.Enum):
    """Represents the possible server states at any given time"""
    LEADER = 1
    FOLLOWER = 2
    CANDIDATE = 3


class SimulatorSocket:
    ''' The simulator uses unix ports to interface instances of this program
        with each other. All messages are stringifyed JSON objects.'''
    def __init__(self, lan):
        self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        self.sock.connect(lan)

    def recv(self):
        """Returns the data from the socket as a deserialized JSON object"""
        msg_raw = self.sock.recv(MAX_BYTES)
        msg = json.loads(bytes.decode(msg_raw)) if len(msg_raw) != 0 else {}
        return msg

    def send(self, msg):
        """Sends a JSON object through the socket"""
        msg = json.dumps(msg).encode()
        self.sock.send(msg)


class Server:
    def __init__(self, id_, replicas):
        self.id = id_
        self.replicas = replicas 
        self.sock = SimulatorSocket(self.id)
        self.datastore = {} # state machine containing all key-value pairs
        self.reset_timeouts()

        # ---------------------- PERSISTENT STATE (ALL) -----------------------
        self.current_term = 0 # latest term server has seen
        self.voted_for = None # ID of candidate that received vote in current term
        # log entries; each entry contains command and term (first index is 1)
        self.log = [{'command': None, 'term': None}]

        # ----------------------- VOLATILE STATE (ALL) ------------------------
        self.commit_idx = 0 # index of highest log entry known to be committed
        self.last_applied = 0 # index of highest log entry applied to state machine

        # --------------------- VOLATILE STATE (LEADER) -----------------------
        self.next_idx = {} # index of next log entry to send to each server
        self.match_idx = {} # index of highest log entry known on each server
        self.prev_heartbeat = current_time() # timestamp of previous heartbeat

        # Start heartbeat thread
        self.transition_to_state(State.CANDIDATE)
        threading.Thread(target=self.heartbeat_thread).start()

    @property
    def last_log_idx(self):
        return len(self.log) - 1
    
    def transition_to_state(self, state):
        if state == State.LEADER:
            # Re-initialize any necessary fields
            self.state = State.LEADER
            self.leader = self.id
            self.commit_idx = len(self.log)
            self.prev_heartbeat = current_time()
            for replica in self.replicas:
                # For each server, index of next log entry to send to that server
                # (initialized to leader last log index + 1)
                self.next_idx[replica] = self.commit_idx + 1
                # For each server, index of highest log entry known to be 
                # replicated on server (initialized to 0, increases monotonically)
                self.match_idx[replica] = 0
            
        elif state == State.FOLLOWER:
            self.state = State.FOLLOWER
            self.voted_for = None
            self.votes = []
            self.reset_timeouts()

        elif state == State.CANDIDATE:
            self.state = State.CANDIDATE
            self.leader = 'FFFF' # ID of the assumed leader
            self.reset_timeouts()
            self.current_term += 1
            # Reset any votes from a previous election
            self.votes = set()
            # Vote for self
            self.voted_for = self.id
            self.votes.add(self.id)
            
        else:
            #TODO define a proper exception
            raise 1

    def check_timeout(self):
        """Determines if an election needs to take place"""
        time = current_time()

        if self.state != State.LEADER:
            return (time - self.prev_timeout) >= self.election_timeout
        else:
            return False

    def reset_timeouts(self):
        """Resets the election and leader timeouts"""
        self.election_timeout = random.uniform(0.15, 0.3)
        self.prev_timeout = current_time()

    def send(self, dst, **kwargs):
        msg = {
            'src': self.id,
            'dst': dst,
            'leader': self.leader,
            'term': self.current_term
        }
        msg.update(**kwargs)
        logging.info('Replica ' + self.id + 'sending ' +json.dumps(msg))
        self.sock.send(msg)
        
    def reply(self, msg, **kwargs):
        mymsg = msg.copy()
        dst = msg['src']
        mymsg.update(src=msg['dst'], **kwargs)
        del mymsg['dst']
        self.send(dst, **mymsg)

    def send_redirect(self, msg):
        """Sends a redirect message back to the client"""
        self.reply(msg, type='redirect')

    def send_ok(self, msg, **kwargs):
        """Sends an OK message back to the client"""
        self.reply(msg, type='ok', **kwargs)

    def send_fail(self, msg):
        """Sends a fail message back to the client"""
        self.reply(msg, type='fail')

    def heartbeat_thread(self):
        """Sends periodic heartbeats as the leader"""
        time = current_time()
        while True:
            if self.state == State.LEADER:
                if (time - self.prev_heartbeat) >= HEARTBEAT_FREQ:
                    for replica in self.replicas:
                        self.send_append_entries(replica,
                                prev_log_term=self.current_term)
                    # Reset the heartbeat timer
                    self.prev_heartbeat = time

    @myutils.FunctionDispatcher.decorate
    def dispatch(self, key, *args, **kwargs):
        pass

    def send_request_vote(self):
        """Sends RequestVote RPCs to all other servers"""
        for replica in self.replicas:
            self.send(replica, **{
                'type': 'request_vote',
                # Index of candidate's last log entry
                'last_log_idx': self.last_log_idx,
                # Term of candidate's last log entry
                'last_log_term': self.log[self.last_log_idx]['term']
            })

    @dispatch.add('request_vote')
    def handle_request_vote(self, msg):
        """Handles a RequestVote RPC from a candidate"""
        if self.current_term <= msg['term']:
            if self.voted_for is None or self.voted_for == msg['src']:
                if msg['last_log_idx'] >= self.last_log_idx:
                    self.reply(msg, type='vote_granted')

    @dispatch.add('vote_granted')
    def handle_received_vote(self, msg):
        """Handles a received vote during an election"""
        self.votes.add(msg['src'])
        quorum = len(self.replicas)//2 + 1
        if len(self.votes) >= quorum:
            self.transition_to_state(State.LEADER)

    def send_append_entries(self, replica, entries=None, prev_log_term=0, prev_log_idx=0):
        """Sends an AppendEntries RPC to a replica"""
        self.send(replica, **{
            'type': 'append_entries',
            # Term of prev_log_idx entry
            'prev_log_term': prev_log_term,
            'prev_log_idx': prev_log_idx,
            'entries': entries if entries is not None else [],
            'leader_commit': self.commit_idx
        })

    def broadcast_append_entries(self):
        """Sends an AppendEntries RPC to all replicas"""
        for replica in self.replicas:
            prev_log_idx = self.next_idx[replica] - 1
            # Adhering to RAFT ensures that the leader will always have
            # the longest log
            self.send_append_entries(replica, self.log[prev_log_idx:], 
                    self.log[prev_log_idx]['term'], prev_log_idx)    
        
    @dispatch.add('append_entries')
    def handle_append_entries(self):
        """Handles an AppendEntries RPC from a leader"""
        prev_log_idx = msg['prev_log_idx']
        prev_log_term = msg['prev_log_term']

        if msg['term'] < self.current_term:
            self.send_fail(msg)
        elif not msg['entries']: #Heartbeat packet
            self.send_ok(msg)
        elif prev_log_idx >= len(self.log):
            self.send_fail(msg)
        elif self.log[prev_log_idx]['term'] != prev_log_term:
            self.send_fail(msg)
        else:
            if self.state == State.CANDIDATE:
                self.transition_to_state(State.FOLLOWER, msg)

            self.log = self.log[:prev_log_idx + 1]
            self.log.extend(msg['entries'])
            self.send_ok(msg)

    @dispatch.add('put')
    def handle_put(self, msg):
        """Handles a put request from the client"""
        if self.state != State.LEADER:
            # Send fail if leader unknown
            if self.leader == 'FFFF':
                self.send_fail(msg)
            # Else, redirect to the leader
            else:
                self.send_redirect(msg)
            return

        # Append entry to local log
        key = msg['key']
        value = msg['value']
        entry = {
            'command': 'put',
            'MID': msg['MID'],
            'key': key,
            'value': value,
            'term': self.current_term
        }
        self.log.append(entry)
        self.commit_idx = len(self.log)

        # Commit to the state machine
        # TODO: Wait for quorum
        self.datastore[key] = value

        # Reply to client
        self.send_ok(msg, {})

    @dispatch.add('get')
    def handle_get(self, msg):
        """Handles a get request from the client"""
        if self.state == State.LEADER:
            # Respond with the value if it exists
            self.send_ok(self.datastore.get(msg['key'], ''))
        elif self.leader == 'FFFF':
            self.send_fail(msg)
        else:
            self.send_redirect(msg)

    def run(self):
        """Runs the main loop"""
        while True:
            if self.check_timeout():
                # Election timeout met, so start election
                self.transition_to_state(State.CANDIDATE)
                self.send_request_vote()

            ready = select.select([self.sock.sock], [], [], 0.1)[0]
    
            if self.sock.sock in ready:
                msg = self.sock.recv()

                # Skip if there is no data
                if not msg:
                    continue
                # Else, handle the message
                else:
                    self.dispatch(msg['type'], msg)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Distributed Key-Value Store',
            add_help=False)
    parser.add_argument('id', help='ID of your replica (four-digit hex)')
    parser.add_argument('replicas',
            nargs='+', help='IDs of all other replicas (four-digit hexs)')
    args = parser.parse_args()

    logging.basicConfig(filename=args.id + '.log',level=logging.INFO)


    # Initialize the datastore with the arguments passed
    server = Server(args.id, args.replicas)
    server.run()
