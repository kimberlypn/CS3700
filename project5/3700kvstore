#!/usr/bin/python3 -u
import argparse
import socket
import select
import time
import json
import random
import threading
from enum import Enum

# ----------------------------- GLOBAL VARIABLES -----------------------------

MAX_BYTES = 32768
HEARTBEAT_FREQ = 0.5 # seconds, or 500 milliseconds

# ------------------------- END OF GLOBALS VARIABLES -------------------------

def current_time():
    """Returns the current time in seconds"""
    return time.time()


class State(Enum):
    """Represents the possible server states at any given time"""
    LEADER = 1
    FOLLOWER = 2
    CANDIDATE = 3


class Sock:
    def __init__(self, lan):
        self.sock = self.__create_socket(lan) # socket over which all messages will occur

    def __create_socket(self, lan):
        """Creates and returns a connected socket"""
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        sock.connect(lan)
        return sock

    def recv(self):
        """Returns the data from the socket as a deserialized JSON object"""
        msg_raw = self.sock.recv(MAX_BYTES)
        msg = json.loads(bytes.decode(msg_raw)) if len(msg_raw) != 0 else {}
        return msg

    def send(self, msg):
        """Sends a JSON object through the socket"""
        print('{src} sending to {dst}'.format(src=msg['src'], dst=msg['dst']))
        msg = str.encode(json.dumps(msg))
        self.sock.send(msg)


class Server:
    def __init__(self, id, replicas):
        self.id = id # own ID
        self.replicas = replicas # IDs of all other replicas
        self.sock = Sock(id) # Sock object for sending/receiving messsages
        self.state = State.FOLLOWER # current state; initialized to follower
        self.leader = "FFFF" # ID of the assumed leader
        # election timeout chosen randomly from fixed interval of 0.15-0.3 s
        self.election_timeout = random.uniform(0.15, 0.3)
        self.prev_timeout = current_time() # timestamp of previous timeout

        # ---------------------- PERSISTENT STATE (ALL) -----------------------
        self.current_term = 0 # latest term server has seen
        self.voted_for = None # ID of candidate that received vote in current term
        self.log = [] # log entries

        # ----------------------- VOLATILE STATE (ALL) ------------------------
        self.commit_idx = 0 # index of highest log entry known to be committed
        self.last_applied = 0 # index of highest log entry applied to state machine

        # --------------------- VOLATILE STATE (LEADER) -----------------------
        self.next_idx = {} # index of next log entry to send to each server
        self.match_idx = {} # index of highest log entry known on each server

        # Start heartbeat thread
        threading.Thread(target=self.send_heartbeat).start()
        # Start timeout thread
        threading.Thread(target=self.check_timeout).start()

    def send_heartbeat(self):
        """Sends periodic heartbeats as the leader"""
        while True:
            if self.state == State.LEADER:
                for replica in self.replicas:
                    msg = {
                        'src': self.id, 
                        'dst': replica,
                        'leader': self.leader, 
                        'type': 'heartbeat'
                    }
            time.sleep(HEARTBEAT_FREQ) 

    def start_election(self):
        """Handles what happens when a node becomes a candidate"""
        # Switch to candidate state
        self.state = State.CANDIDATE
        # Increment the current term
        self.current_term += 1
        # Vote for self
        self.voted_for = self.id
        # Reset election timer
        self.election_timeout = random.uniform(0.15, 0.3)

    def check_timeout(self):
        """Determines if an election needs to take place"""
        time = curren_time()

        if self.state != State.LEADER:
            if (time - self.prev_timeout) >= self.election_timeout:
                # Election timeout met, so start election
                start_election()
                # Send RequestVote RPCs to all other servers
                last_log_idx = len(self.log) - 1
                for replica in self.replicas:
                    msg = {
                        'src': self.id,
                        'dst': replica,
                        'type': 'request_vote',
                        # Candidate's term
                        'term': self.current_term,
                        # Index of candidate's last log entry
                        'last_log_idx': last_log_idx,
                        # Term of candidate's last log entry
                        'last_log_term': self.log[last_log_idx]['term']
                    }
                    self.sock.send(msg)
                # Reset the previous timeout
                self.prev_timeout = time

    def handle_get(self):
        """Handles a get request from the client"""


    def handle_put(self):
        """Handles a put request from the client"""

    def handle_data(self):
        """Handles the data received from the socket accordingly"""
        

    def run(self):
        """Runs the main loop"""
        while True:
            # Check for an election timeout
            check_timeout()

            ready = select.select([self.sock.sock], [], [], 0.1)[0]
        
            if self.sock.sock in ready:
                msg = self.sock.recv()

                # Skip if there is no data
                if not msg:
                    continue

                # Reply with a fail message if the leader if unknown
                if self.leader == "FFFF":
                    resp = {
                        'src': self.id,
                        'dst': msg['src'],
                        'leader': self.leader,
                        'type': 'fail',
                        'MID': msg['MID']
                    }
                    self.sock.send(resp)
                # Else, handle the message
                else:
                    handle_data()
              

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Distributed Key-Value Store.',
                                     add_help=False)
    parser.add_argument('id',
                        help='ID of your replica (four-digit hex)')
    parser.add_argument('replicas',
                        nargs='+',
                        help='IDs of all other replicas (four-digit hexs)')
    args = parser.parse_args()

    # Initialize the datastore with the arguments passed
    server = Server(args.id, args.replicas)

    # Start the program
    server.run()
